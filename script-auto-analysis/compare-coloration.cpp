//
//    Author: Marine Collery <collery@kth.se>
//    This program is part of the research project for the RMSW P1P2 17. This program is called by compareColoration.sh
//    This program reads a coloration-*.txt file generated by the Computecoloration*.jar files (and then the generateData.sh script)
//	  and a listColorToVFinal-*.txt file generated by ipl.sh script (global.sh).
//
//    It checks whether the coloring is the same in our implementation and the ILP one.
//	
//	  This program can also be used directly.
//
//    A sample input format for the first input of this program is as follows:
//      N
//      *An adjacency matrix*
//      16 78 58 39 19 42 22 61 80 64 44 24 82 67 47 27 9 70 50 30 12 15 1 3 5 72 52 33 75 55 36
//      37 17 79 59 40 20 23 62 43 81 65 45 25 83 7 68 48 28 10 51 31 13 2 4 6 71 73 53 34 76 56
//      26 57 8 38 69 18 49 29 60 11 41 21 32 14 63 74 54 35 66 46 77
//
//    The first integer represents the number of nodes that is followed by an adjacency matrix, that is,
//    an N*N matrix with 0-1 entries.
//    After the adjacency matrix there are n lines. Line i with the integers 16, 78, 58, etc. means that
//    node 16, 78, 58, etc. have been colored with Color i. The integers 16, 78, etc. match the corresponding line in
//    the adjacency matrix.
//
//    The second input file is only composed of the last n lines describing the coloration.
//
//
//    The output of the program is simply "SAME" if the coloring is the same, and "DIFFERENT" otherwise.
//    How to run it? ./compare-coloring <your_input_file1> <your_input_file2>
//
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

std::vector<std::vector<int> > readColors(int numNodes, int numColors, std::ifstream& file){
    std::string line;
    int color = 0;
    std::vector<std::vector<int> > c(numColors);
    for (int i = 0; i < numColors; i++){
        c[i].resize(numNodes);
    }

    while (getline(file, line)) {
		std::stringstream ss(line);
		int node;
		int i=0;
		while (ss >> node){
			c[color][i] = node;
			i++;
		}
        c[color].resize(i);
        color++;
    }
    return c;
}


bool compareColoring(std::vector<std::vector<int> >& coloring, std::vector<std::vector<int> >& coloringILP) {
    int numColors = coloring.size();
    bool differentFINAL = false;
    std::vector<int> size(numColors);
    std::vector<int> sizeILP(numColors);
    for (int i = 0; i < numColors; i++) {
    	size[i] = coloring[i].size();
    	sizeILP[i] = coloringILP[i].size();
    }
    //Test SIZE
    for (int i = 0; i < numColors; i++) {
    	int j=0;
    	while (size[i] != sizeILP[j]){
    		j++;
    		if(j == numColors){
    			std::cout << "Size are not the same ?!" << std::endl;
    			return true;
    		}
    	}

    	//Initialization
    	bool test[size[i]];
    	for (int k1 = 0; k1 < size[i]; k1++){
    		test[k1]=false;
    	}

    	//Compararison
    	for (int k1 = 0; k1 < size[i]; k1++){
    		for (int k2 = 0; k2 < size[i]; k2++){
    			if(coloring[i][k1] == coloringILP[j][k2]){
    				test[k1]=true;
    			}
    		}
    	}
    	// Are they exactly the same ?
    	bool same = true;
    	for (int k1 = 0; k1 < size[i]; k1++){
    		same= same && test[k1];
    	}

    	// Are they necesseraly different?
    	bool different = false;
    	for (int k1 = 0; k1 < size[i]; k1++){
    		different= different && test[k1];
    	}


    	if (different == true && same == false){
    		std::cout << "Values are not the same for line " << i << " of the polynomial implementation and line " << j << " for the ILP program." << std::endl;
    		return true;
    	}




    }

    return differentFINAL;
}

int main(int argc, char *argv[]) {
    std::ifstream file(argv[1]);
    std::ifstream fileILP(argv[2]);


    if (file.is_open() && fileILP.is_open()) {
        std::string line;
        getline(file, line);
        int numNodes = std::stoi(line);

        for (int i = 0; i < numNodes; i++){
		    getline(file, line);
		}

        int numColors = 0;
        std::string lineILP;
     	while(std::getline(fileILP, lineILP))
        	numColors++;
        fileILP.close();
        std::ifstream fileILP(argv[2]);

        std::cout << "Reading colors..." << std::endl;
        auto coloring = readColors(numNodes, numColors, file);

        std::cout << "Reading colors from ILP..." << std::endl;
        auto coloringILP = readColors(numNodes, numColors, fileILP);


        std::cout << "Compare coloring..." << std::endl;
        if (compareColoring(coloring, coloringILP))
            std::cout << "Result: DIFFERENT" << std::endl;
        else
            std::cout << "Result: SAME" << std::endl;
        return 0;
    }
    else {
        std::cout << "Error while opening the files" << std::endl;
        return 1;
    }
}

